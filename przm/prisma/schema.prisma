// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"

  runtime                = "workerd"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"

  output          = "../generated/prisma"
  previewFeatures = ["queryCompiler", "driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid()) // User ID (UUID-based)
  username    String      @unique
  firstName   String
  lastName    String
  towCompany  String?     // Optional for non-tower users
  createdAt   DateTime    @default(now())

  credentials Credential[] // Relationship: One user can have many credentials
  towJobs     TowJob[]    // Relationship: One user (tower) can have many tow jobs
}

model Credential {
  id            String   @id @default(uuid()) // Internal DB ID
  userId        String   @unique // Every credential is linked to a specific user
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  credentialId  String   @unique // WebAuthn credential identifier
  publicKey     Bytes
  counter       Int      @default(0)
  
  @@index([credentialId])
  @@index([userId])
}

enum JobStatus {
  WAITING
  DISPATCHED
  EN_ROUTE
  ON_SCENE
  TOWING
  COMPLETED
  CANCELLED
}

enum JobPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model TowJob {
  id                String      @id @default(uuid())
  jobNumber         String?      @default(cuid()) // Job tracking number with unique default
  towerId           String      // Foreign key to User (the tower)
  tower             User        @relation(fields: [towerId], references: [id])
  
  // Customer information
  customerName      String
  customerPhone     String
  
  // Vehicle information
  vehicleMake       String
  vehicleModel      String
  vehicleYear       Int?
  vehicleColor      String?
  licensePlate      String?
  vin               String?
  
  // Location information
  pickupLocation    String      // Address or description
  pickupLatitude    Float?
  pickupLongitude   Float?
  dropoffLocation   String?     // Destination address (maps to "destination" in UI)
  dropoffLatitude   Float?
  dropoffLongitude  Float?
  distance          String?     // Calculated or estimated distance
  estimatedTime     String?     // Estimated travel/completion time
  
  // Job details
  status            JobStatus   @default(WAITING)
  priority          JobPriority @default(NORMAL)
  description       String?     // Additional details about the job
  estimatedCost     Float?
  actualCost        Float?
  
  // Assignment information
  driverName        String?     // Assigned driver name
  truckName         String?     // Assigned truck/vehicle name
  
  // Timestamps
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  scheduledAt       DateTime?   // When the job is scheduled for
  completedAt       DateTime?   // When the job was completed
  
  @@index([towerId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([jobNumber])
}